[{"C:\\Users\\Admin\\monte-hall\\monte-hall\\src\\index.js":"1","C:\\Users\\Admin\\monte-hall\\monte-hall\\src\\reportWebVitals.js":"2","C:\\Users\\Admin\\monte-hall\\monte-hall\\src\\App.js":"3","C:\\Users\\Admin\\Desktop\\proekt\\rep\\src\\index.js":"4","C:\\Users\\Admin\\Desktop\\proekt\\rep\\src\\reportWebVitals.js":"5","C:\\Users\\Admin\\Desktop\\proekt\\rep\\src\\components\\Game\\DoorGame\\DoorField.js":"6","C:\\Users\\Admin\\Desktop\\proekt\\rep\\src\\components\\Game\\DoorGame\\Door\\Door.js":"7","C:\\Users\\Admin\\Desktop\\proekt\\rep\\src\\components\\utils\\utils.js":"8","C:\\Users\\Admin\\Desktop\\proekt\\rep\\src\\components\\Game\\Game.js":"9","C:\\Users\\Admin\\Desktop\\proekt\\rep\\src\\components\\Game\\HowToPlay\\HowToPlay.js":"10","C:\\Users\\Admin\\Desktop\\proekt\\rep\\src\\components\\Game\\ToggleButton\\ToggleButton.js":"11","C:\\Users\\Admin\\Desktop\\proekt\\rep\\src\\components\\Game\\Statistics\\Statictics.js":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":615,"mtime":1607021859674,"results":"16","hashOfConfig":"14"},{"size":536,"mtime":1609182636422,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":5872,"mtime":1610199326066,"results":"20","hashOfConfig":"18"},{"size":980,"mtime":1610123341836,"results":"21","hashOfConfig":"18"},{"size":636,"mtime":1610199326071,"results":"22","hashOfConfig":"18"},{"size":507,"mtime":1610135255737,"results":"23","hashOfConfig":"18"},{"size":1639,"mtime":1610199326068,"results":"24","hashOfConfig":"18"},{"size":319,"mtime":1609255795274,"results":"25","hashOfConfig":"18"},{"size":1725,"mtime":1610199326069,"results":"26","hashOfConfig":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"y0rwqx",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"1tvftre",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"35"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"35"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"35"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"35"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"35"},"C:\\Users\\Admin\\monte-hall\\monte-hall\\src\\index.js",[],"C:\\Users\\Admin\\monte-hall\\monte-hall\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\monte-hall\\monte-hall\\src\\App.js",["57"],"C:\\Users\\Admin\\Desktop\\proekt\\rep\\src\\index.js",[],["58","59"],"C:\\Users\\Admin\\Desktop\\proekt\\rep\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\Desktop\\proekt\\rep\\src\\components\\Game\\DoorGame\\DoorField.js",["60"],"import styles from './Door/Door.module.css';\r\nimport React from \"react\";\r\nimport Door from \"./Door/Door\";\r\nimport Statistics from \"../Statistics/Statictics\";\r\nimport { shuffle } from \"../../utils/utils\";\r\n\r\nexport class DoorField extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isChosen: [false, false, false],\r\n      trueArr: shuffle([0,1,2]),\r\n      moveConfirmed: false,\r\n      isOpened: [false, false, false],\r\n      openCount: 0,\r\n      roundResult: 'none',\r\n      resultsCount: [],\r\n      // choiceIsChanged: {door: 0, changed: false},\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.state.openCount !== prevState.openCount) {\r\n      this.checkWinner();\r\n    }\r\n  }\r\n\r\n  // Controls\r\n\r\n  handleClick(i) {\r\n  const isChosen = this.state.isChosen.slice().fill(false);\r\n  isChosen[i] = !this.state.isChosen[i];\r\n    const confirmed = function () {\r\n      return (isChosen.includes(true))\r\n    }\r\n\r\n  this.setState({\r\n    isChosen: isChosen,\r\n    moveConfirmed: confirmed(),\r\n  })}\r\n\r\n\r\n  confirmActionOnKey(e) {\r\n    if (e.key === ' ') {\r\n      this.confirmAction();\r\n    }\r\n  }\r\n\r\n  confirmAction() {\r\n    if (this.state.roundResult === 'none') {\r\n    const isChosen = this.state.isChosen.slice()\r\n    const confirmed = function () {\r\n      return (isChosen.includes(true))\r\n    }\r\n\r\n     this.setState({\r\n       isChosen: isChosen,\r\n       moveConfirmed: confirmed(),\r\n     })\r\n\r\n    this.openFalseDoor();\r\n  } else {\r\n      this.clearRound();\r\n    }}\r\n\r\n\r\n  openFalseDoor() {\r\n    if (this.state.moveConfirmed) {\r\n    const falseDoorArr = this.state.isOpened.slice();\r\n    const checkFalseDoorArr = (falseDoorArr.includes('open'));\r\n    let count = 0;\r\n      if (!checkFalseDoorArr) {\r\n        for (let i in falseDoorArr) {\r\n          if (!this.state.isChosen[i] && !this.state.trueArr[i] && count < 2) {\r\n            falseDoorArr[i] = 'open';\r\n            count++;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        for (let i in falseDoorArr) {\r\n          if (!this.state.isChosen[i] && count < 2) {\r\n            falseDoorArr[i] = 'open';\r\n            count++;\r\n          }\r\n        }\r\n      }\r\n\r\n    this.setState({\r\n      isOpened: falseDoorArr,\r\n      openCount: count,\r\n    })}\r\n  }\r\n\r\n  checkWinner() {\r\n    const isTrue = this.state.trueArr.slice();\r\n    let isOpened = this.state.isOpened.slice();\r\n    const openCount = this.state.openCount;\r\n    let isChosen = this.state.isChosen.slice();\r\n    let result = this.state.roundResult\r\n\r\n    for (let i in isOpened) {\r\n      if (isOpened[i] === 'open' && isTrue[i] === true) {\r\n        result = 'lose';\r\n        break;\r\n      } else if (openCount > 1) {\r\n        result = 'win';\r\n        isChosen = Array(3).fill(false);\r\n      }\r\n    }\r\n\r\n    if (openCount > 1) {\r\n      isOpened = Array(3).fill('open');\r\n    }\r\n      this.setState({\r\n        roundResult: result,\r\n        isOpened: isOpened,\r\n        isChosen: isChosen,\r\n      })\r\n    };\r\n\r\n  clearRound() {\r\n    let result = this.state.roundResult;\r\n    const count = this.state.resultsCount;\r\n    count.push(result);\r\n    this.setState({\r\n      isChosen: [false, false, false],\r\n      trueArr: shuffle([0,1,2]),\r\n      moveConfirmed: false,\r\n      isOpened: [false, false, false],\r\n      openCount: 0,\r\n      roundResult: 'none',\r\n      resultsCount: count,\r\n  })}\r\n\r\n  resetState() {\r\n    this.setState({\r\n      isChosen: [false, false, false],\r\n      trueArr: shuffle([0,1,2]),\r\n      moveConfirmed: false,\r\n      isOpened: [false, false, false],\r\n      openCount: 0,\r\n      roundResult: 'none',\r\n      resultsCount: [],\r\n      choiceIsChanged: false,\r\n\r\n    })}\r\n\r\n  renderDoor(i){\r\n     return (\r\n    <Door\r\n      id={i}\r\n      isTrue={this.state.trueArr[i]}\r\n      isChosen={this.state.isChosen[i]}\r\n      onClick={() => this.handleClick(i)}\r\n      isOpened={this.state.isOpened[i]}\r\n      gameResult={this.state.roundResult}\r\n     />\r\n     )\r\n  }\r\n\r\n\r\n      render() {\r\n    return (\r\n      <div tabIndex={'-1'} onKeyDown={(e) => this.confirmActionOnKey(e)}>\r\n      <h1 align={\"center\"}>Round {this.state.resultsCount.length + 1} {(this.state.roundResult === 'none') ? '' : this.state.roundResult.toUpperCase()}</h1>\r\n        <section className={styles.main}>\r\n        <div className={styles.doorField}>\r\n          <Statistics\r\n            result={this.state.resultsCount}\r\n          />\r\n        {this.renderDoor(0)}\r\n        {this.renderDoor(1)}\r\n        {this.renderDoor(2)}\r\n          <button className={styles.doorButton} onClick={() => this.confirmAction()}>{this.state.roundResult !== 'none' ? 'Next round' : 'Continue'}</button>\r\n          <button onClick={() => this.clearRound()}>Skip round</button>\r\n          <button onClick={() => this.resetState()}>Clear game</button>\r\n        </div>\r\n          <div style={{\r\n            margin: '20px',\r\n            textAlign: \"center\",\r\n          }}> Make your choice and Press the \"Continue\" button (or \"Space\" instead).\r\n          </div>\r\n        </section>\r\n      </div>\r\n    )}\r\n}\r\n\r\n\r\n","C:\\Users\\Admin\\Desktop\\proekt\\rep\\src\\components\\Game\\DoorGame\\Door\\Door.js",["61"],"import styles from './Door.module.css';\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nfunction Door(props) {\r\n\r\n  let [styleCl, setStyleCl] = useState(styles.door)\r\n\r\n  useEffect(() => {\r\n    setStyleCl(styleCl = handleClass())\r\n  },[[props.isChosen, props.isOpened]])\r\n\r\n\r\n\r\n  function handleClass() {\r\n    if (props.isChosen === true && props.gameResult === 'none') {\r\n     styleCl = styles.door_chosen\r\n    } else if (props.isChosen === true && props.gameResult !== 'none') {\r\n        styleCl = (props.isTrue) ? styles.door_opened_good : styles.door_opened_bad\r\n    } else if (props.isOpened === 'open' && props.isTrue) {\r\n      styleCl = styles.door_opened_good\r\n    } else if (props.isOpened === 'open' && !props.isTrue) {\r\n      styleCl = styles.door_opened_bad\r\n    } else styleCl = styles.door\r\n    return styleCl;\r\n  }\r\n\r\n\r\n\r\nreturn(\r\n    <div className={styleCl} onClick={props.onClick}>\r\n      Door {props.id+1}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Door;\r\n","C:\\Users\\Admin\\Desktop\\proekt\\rep\\src\\components\\utils\\utils.js",[],"C:\\Users\\Admin\\Desktop\\proekt\\rep\\src\\components\\Game\\Game.js",["62","63"],"import React, {useEffect, useState} from \"react\";\r\nimport {DoorField} from \"./DoorGame/DoorField\";\r\nimport {HowToPlay} from \"./HowToPlay/HowToPlay\";\r\nimport styles from \"./HowToPlay/HowToPlay.module.css\";\r\n\r\nfunction Game () {\r\n\r\n  let [countRounds, setCountRounds] = useState(0)\r\n  let resultCounter = () => {setCountRounds(countRounds++)};\r\n\r\n\r\n  return (\r\n    <div>\r\n      <HowToPlay\r\n      />\r\n      <DoorField\r\n      resultCounter={resultCounter}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Game;\r\n","C:\\Users\\Admin\\Desktop\\proekt\\rep\\src\\components\\Game\\HowToPlay\\HowToPlay.js",["64"],"C:\\Users\\Admin\\Desktop\\proekt\\rep\\src\\components\\Game\\ToggleButton\\ToggleButton.js",["65","66"],"import React, { useEffect } from \"react\";\r\nimport styles from '../HowToPlay/HowToPlay.module.css';\r\n\r\n\r\nexport function ToggleButton (props) {\r\n  let { name, onClick, autoFocus, className } = {...props};\r\n\r\n  return (\r\n    <button autoFocus={autoFocus} className={className} onClick={onClick} >{name}</button>\r\n  )\r\n}\r\n","C:\\Users\\Admin\\Desktop\\proekt\\rep\\src\\components\\Game\\Statistics\\Statictics.js",["67"],"import React, {useState, useEffect} from \"react\";\r\nimport styles from './Statistics.module.css';\r\nimport { winstreak } from \"../../utils/utils\"\r\n\r\nfunction Statistics (props) {\r\n\r\n  let [ ...result ] = props.result;\r\n  // console.log(len)\r\n  // console.log(result)\r\n  const totalWin = result.filter((item => item === 'win')).length\r\n  const totalLose = result.filter((item => item === 'lose')).length\r\n  const winrate = ((Math.round((totalWin / result.length).toFixed(2)*100)))\r\n  const winstreakMax = winstreak(result).max;\r\n  const winstreakCurrent = winstreak(result).current;\r\n\r\n  useEffect(() => {\r\n      renderLine(result)\r\n  }, [result])\r\n\r\n  function renderLine (result) {\r\n    let lines = [];\r\n    for (let i = 0; i < result.length; i++) {\r\n      let lineCl = [];\r\n      if (result[i] === 'none') {\r\n        lineCl[i] = styles.neutral\r\n      } else if (result[i] === 'win') {\r\n        lineCl[i] = styles.win\r\n      } else lineCl[i] = styles.lose\r\n\r\n      lines.unshift(<li key={i} className={lineCl[i]}>\r\n        {`Round ${i + 1}: ${(result[i] === 'none') ? 'skipped' : result[i]}`}</li>)\r\n    }\r\n      return lines;\r\n    }\r\n\r\n    return (\r\n      <div className={styles.wrapper}>\r\n        <h3 style={{width: '250px'}}>Statistics</h3>\r\n        <p>Rounds played: <span>{result.length}</span></p>\r\n        <p>Win: <span>{totalWin}</span></p>\r\n        <p>Lose: <span>{totalLose}</span></p>\r\n        <p>Winrate: <span>{(isNaN(winrate)) ? '0%' : `${winrate}%`}</span></p>\r\n        <p>Maximum winstreak: <span>{(winstreakMax)}</span></p>\r\n        <p>Current winstreak: <span>{(winstreakCurrent)}</span></p>\r\n        <ul>\r\n          {renderLine(result)}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\nexport default Statistics;\r\n",{"ruleId":"68","severity":1,"message":"69","line":1,"column":8,"nodeType":"70","messageId":"71","endLine":1,"endColumn":12},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":49,"column":7,"nodeType":"78","messageId":"79","endLine":54,"endColumn":8},{"ruleId":"80","severity":1,"message":"81","line":10,"column":26,"nodeType":"82","endLine":10,"endColumn":39},{"ruleId":"68","severity":1,"message":"83","line":1,"column":16,"nodeType":"70","messageId":"71","endLine":1,"endColumn":25},{"ruleId":"68","severity":1,"message":"84","line":4,"column":8,"nodeType":"70","messageId":"71","endLine":4,"endColumn":14},{"ruleId":"68","severity":1,"message":"83","line":1,"column":27,"nodeType":"70","messageId":"71","endLine":1,"endColumn":36},{"ruleId":"68","severity":1,"message":"83","line":1,"column":17,"nodeType":"70","messageId":"71","endLine":1,"endColumn":26},{"ruleId":"68","severity":1,"message":"84","line":2,"column":8,"nodeType":"70","messageId":"71","endLine":2,"endColumn":14},{"ruleId":"68","severity":1,"message":"85","line":1,"column":16,"nodeType":"70","messageId":"71","endLine":1,"endColumn":24},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["86"],"no-negated-in-lhs",["87"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","Assignments to the 'styleCl' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'useEffect' is defined but never used.","'styles' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]