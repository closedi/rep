{"version":3,"sources":["components/Game/DoorGame/Door/Door.module.css","components/Game/DoorGame/Door/Door.js","components/utils/utils.js","components/Game/Statistics/Statictics.js","components/Game/DoorGame/DoorField.js","components/Game/HowToPlay/ToggleButton/ToggleButton.js","components/Game/HowToPlay/HowToPlay.js","components/Game/Game.js","reportWebVitals.js","index.js","components/Game/HowToPlay/HowToPlay.module.css","components/Game/Statistics/Statistics.module.css"],"names":["module","exports","Door","props","id","isTrue","isChosen","onClick","isOpened","gameResult","useState","styles","door","styleCl","setStyleCl","useEffect","door_chosen","door_opened_good","door_opened_bad","handleClass","className","shuffle","numPool","j","x","i","length","parseInt","Math","random","map","value","winstreak","array","max","current","Statistics","result","totalWin","filter","item","totalLose","winrate","round","toFixed","winstreakMax","winstreakCurrent","renderLine","lines","lineCl","neutral","win","lose","unshift","wrapper","style","width","statWrapper","titles","isNaN","DoorField","state","trueArr","moveConfirmed","openCount","roundResult","resultsCount","prevProps","prevState","snapshot","this","checkWinner","slice","fill","confirmed","includes","setState","e","key","confirmAction","openFalseDoor","clearRound","falseDoorArr","count","Array","push","handleClick","tabIndex","onKeyDown","confirmActionOnKey","align","toUpperCase","main","doorField","renderDoor","doorButton","continueButton","resetState","margin","textAlign","height","href","target","rel","React","Component","ToggleButton","name","autoFocus","HowToPlay","closed","frame","close","setClosed","frame_closed","button_open","button_close","moveList","Game","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,UAAY,wBAAwB,WAAa,yBAAyB,KAAO,mBAAmB,YAAc,0BAA0B,iBAAmB,+BAA+B,gBAAkB,8BAA8B,MAAQ,sB,uKCyCnRC,MAvCf,SAAcC,GAAQ,IAGpBC,EAKeD,EALfC,GACAC,EAIeF,EAJfE,OACAC,EAGeH,EAHfG,SACAC,EAEeJ,EAFfI,QACAC,EACeL,EADfK,SACAC,EAAeN,EAAfM,WARmB,EAWSC,mBAASC,IAAOC,MAXzB,mBAWdC,EAXc,KAWLC,EAXK,KAgCrB,OAnBEC,qBAAU,WACRD,EAAWD,EAIb,WAEGA,GADgB,IAAbP,GAAoC,SAAfG,EACdE,IAAOK,aACM,IAAbV,GAAoC,SAAfG,EACjBJ,EAAUM,IAAOM,iBAAmBN,IAAOO,gBAClC,SAAbV,GAAuBH,EACtBM,IAAOM,iBACK,SAAbT,GAAwBH,EAElBM,IAAOC,KADZD,IAAOO,gBAEnB,OAAOL,EAdcM,MACrB,CAAC,CAACb,EAAUE,KAkBZ,sBAAKY,UAAWP,EAASN,QAASA,EAAlC,kBACQH,EAAG,M,gCCrCR,SAASiB,EAAQC,GAEtB,IADA,IAEMC,EAAGC,EAAGC,EAAIH,EAAQI,OAAQD,EAC9BF,EAAII,SAASC,KAAKC,SAAWJ,GAC3BD,EAAIF,IAAUG,GACdH,EAAQG,GAAKH,EAAQC,GACrBD,EAAQC,GAAKC,GAGjB,OADQF,EAAQQ,KAAI,SAAAC,GAAK,OAAKA,KAIzB,SAASC,EAAUC,GACxB,IAD+B,EAC3BC,EAAM,EACNC,EAAU,EAFiB,cAIdF,GAJc,IAI/B,2BAAwB,CADZ,QACY,QAGpBC,IADAC,EACiBD,EAAOC,EAAUD,GAElCA,EAAOC,EAAUD,EAAOC,EAAUD,EAClCC,EAAU,IAViB,8BAa/B,MAAO,CAACA,QAASA,EAASD,IAAKA,GC2BlBE,MAjDf,SAAqBjC,GAAQ,IAEhBkC,EAFe,YAEJlC,EAAMkC,QAFF,SAIpBC,EAAWD,EAAOE,QAAQ,SAAAC,GAAI,MAAa,QAATA,KAAiBd,OACnDe,EAAYJ,EAAOE,QAAQ,SAAAC,GAAI,MAAa,SAATA,KAAkBd,OACrDgB,EAAYd,KAAKe,MAA4C,KAArCL,EAAWD,EAAOX,QAAQkB,QAAQ,IAC1DC,EAAeb,EAAUK,GAAQH,IACjCY,EAAmBd,EAAUK,GAAQF,QAM3C,SAASY,EAAYV,GAEnB,IADA,IAAIW,EAAQ,GACHvB,EAAI,EAAGA,EAAIY,EAAOX,OAAQD,IAAK,CACtC,IAAIwB,EAAS,GACK,SAAdZ,EAAOZ,GACTwB,EAAOxB,GAAKd,IAAOuC,QACI,QAAdb,EAAOZ,GAChBwB,EAAOxB,GAAKd,IAAOwC,IACdF,EAAOxB,GAAKd,IAAOyC,KAE1BJ,EAAMK,QAAQ,oBAAYjC,UAAW6B,EAAOxB,GAA9B,yBACFA,EAAI,EADF,aACuB,SAAdY,EAAOZ,GAAiB,UAAYY,EAAOZ,KAD3CA,IAGvB,OAAOuB,EAGT,OApBFjC,qBAAU,WACNgC,EAAWV,KACZ,CAACA,IAmBA,sBAAKjB,UAAWT,IAAO2C,QAAvB,UACE,oBAAIC,MAAO,CAACC,MAAO,SAAnB,wBACA,sBAAKpC,UAAWT,IAAO8C,YAAvB,UACA,sBAAKrC,UAAWT,IAAO+C,OAAvB,UACA,gDAAkB,+BAAOrB,EAAOX,YAChC,sCAAQ,+BAAOY,OACf,uCAAS,+BAAOG,OAChB,0CAAY,+BAAQkB,MAAMjB,GAAY,KAAnB,UAA6BA,EAA7B,UACnB,oDAAsB,+BAAQG,OAC9B,oDAAsB,+BAAQC,UAE9B,oBAAI1B,UAAWT,IAAOqC,MAAtB,SACGD,EAAWV,YCzCTuB,EAAb,kDACE,WAAYzD,GAAQ,IAAD,8BACjB,cAAMA,IACD0D,MAAQ,CACXvD,SAAU,EAAC,GAAO,GAAO,GACzBwD,QAASzC,EAAQ,CAAC,EAAE,EAAE,IACtB0C,eAAe,EACfvD,SAAU,EAAC,GAAO,GAAO,GACzBwD,UAAW,EACXC,YAAa,OACbC,aAAc,IATC,EADrB,+DAcqBC,EAAWC,EAAWC,GACnCC,KAAKT,MAAMG,YAAcI,EAAUJ,WACrCM,KAAKC,gBAhBX,kCAsBc9C,GACZ,IAAMnB,EAAWgE,KAAKT,MAAMvD,SAASkE,QAAQC,MAAK,GAClDnE,EAASmB,IAAM6C,KAAKT,MAAMvD,SAASmB,GACnC,IAAMiD,EAAYpE,EAASqE,UAAS,GAEpCL,KAAKM,SAAS,CACZtE,SAAUA,EACVyD,cAAeW,MA7BnB,yCAiCqBG,GACH,MAAVA,EAAEC,KACJR,KAAKS,kBAnCX,sCAwCmC,SAA3BT,KAAKT,MAAMI,YACfK,KAAKU,gBAEHV,KAAKW,eA3CX,sCAgDI,GAAIX,KAAKT,MAAME,cAAe,CAC9B,IAAMmB,EAAeZ,KAAKT,MAAMrD,SAASgE,QAErCW,EAAQ,EACV,GAFwBD,EAAaP,SAAS,QAW5C,IAAK,IAAIlD,KAAKyD,GACPZ,KAAKT,MAAMvD,SAASmB,IAAM0D,EAAQ,IACrCD,EAAazD,GAAK,OAClB0D,UAXJ,IAAK,IAAI1D,KAAKyD,EACZ,IAAKZ,KAAKT,MAAMvD,SAASmB,KAAO6C,KAAKT,MAAMC,QAAQrC,IAAM0D,EAAQ,EAAG,CAClED,EAAazD,GAAK,OAClB0D,IACA,MAYRb,KAAKM,SAAS,CACZpE,SAAU0E,EACVlB,UAAWmB,OAvEjB,oCA4EI,IAAM9E,EAASiE,KAAKT,MAAMC,QAAQU,QAC9BhE,EAAW8D,KAAKT,MAAMrD,SAASgE,QAC7BR,EAAYM,KAAKT,MAAMG,UACzB1D,EAAWgE,KAAKT,MAAMvD,SAASkE,QAC/BnC,EAASiC,KAAKT,MAAMI,YAExB,IAAK,IAAIxC,KAAKjB,EAAU,CACtB,GAAoB,SAAhBA,EAASiB,KAA+B,IAAdpB,EAAOoB,GAAa,CAChDY,EAAS,OACT,MACS2B,EAAY,IACrB3B,EAAS,MACT/B,EAAW8E,MAAM,GAAGX,MAAK,IAIzBT,EAAY,IACdxD,EAAW4E,MAAM,GAAGX,KAAK,SAEzBH,KAAKM,SAAS,CACZX,YAAa5B,EACb7B,SAAUA,EACVF,SAAUA,MAlGlB,mCAuGI,IAAI+B,EAASiC,KAAKT,MAAMI,YAClBkB,EAAQb,KAAKT,MAAMK,aACzBiB,EAAME,KAAKhD,GAEXiC,KAAKM,SAAS,CACZtE,SAAU,EAAC,GAAO,GAAO,GACzBwD,QAASzC,EAAQ,CAAC,EAAE,EAAE,IACtB0C,eAAe,EACfvD,SAAU,EAAC,GAAO,GAAO,GACzBwD,UAAW,EACXC,YAAa,OACbC,aAAciB,MAlHpB,mCAsHIb,KAAKM,SAAS,CACZtE,SAAU,EAAC,GAAO,GAAO,GACzBwD,QAASzC,EAAQ,CAAC,EAAE,EAAE,IACtB0C,eAAe,EACfvD,SAAU,EAAC,GAAO,GAAO,GACzBwD,UAAW,EACXC,YAAa,OACbC,aAAc,OA7HpB,iCAiIazC,GAAG,IAAD,OACV,OACD,cAAC,EAAD,CACErB,GAAIqB,EACJpB,OAAQiE,KAAKT,MAAMC,QAAQrC,GAC3BnB,SAAUgE,KAAKT,MAAMvD,SAASmB,GAC9BlB,QAAS,kBAAM,EAAK+E,YAAY7D,IAChCjB,SAAU8D,KAAKT,MAAMrD,SAASiB,GAC9BhB,WAAY6D,KAAKT,MAAMI,gBAzI7B,uCA+II,IAAI5B,EACJ,OAAQiC,KAAKT,MAAMG,WACjB,KAAK,EAAG3B,EAAS,gBACjB,MACA,KAAK,EAAGA,EAAS,kBAInB,OAAOA,IAvJX,+BA4JgB,IAAD,OACX,OACE,sBAAKkD,SAAU,KAAMC,UAAW,SAACX,GAAD,OAAO,EAAKY,mBAAmBZ,IAA/D,UACA,qBAAIa,MAAO,SAAX,mBAA4BpB,KAAKT,MAAMK,aAAaxC,OAAS,EAA7D,IAA6F,SAA3B4C,KAAKT,MAAMI,YAA0B,GAAKK,KAAKT,MAAMI,YAAY0B,iBACjI,0BAASvE,UAAWT,IAAOiF,KAA3B,UACA,sBAAKxE,UAAWT,IAAOkF,UAAvB,UACCvB,KAAKwB,WAAW,GAChBxB,KAAKwB,WAAW,GAChBxB,KAAKwB,WAAW,GACf,wBACE1E,UAAWT,IAAOoF,WAClBxF,QAAS,kBAAM,EAAKwE,iBAFtB,SAEmE,SAA3BT,KAAKT,MAAMI,YAAyB,aAAeK,KAAK0B,mBAEhG,wBAAQzF,QAAS,kBAAM,EAAK0E,cAA5B,wBACA,wBAAQ1E,QAAS,kBAAM,EAAK0F,cAA5B,2BAEA,sBAAK1C,MAAO,CACV2C,OAAQ,OACRC,UAAW,SACXC,OAAQ,QAHV,wFAKE,uBACA,mBAAGC,KAAM,+IAAsDC,OAAQ,SAAUC,IAAK,aAAtF,SAAqGjC,KAAKT,MAAMK,aAAaxC,OAAS,EAAI,oCAAsC,WAGpL,cAAC,EAAD,CACEW,OAAQiC,KAAKT,MAAMK,sBAtL7B,GAA+BsC,IAAMC,W,QCH9B,SAASC,EAAcvG,GAAQ,IAAD,iBACeA,GAA5CwG,EAD6B,EAC7BA,KAAMpG,EADuB,EACvBA,QAASqG,EADc,EACdA,UAAWxF,EADG,EACHA,UAEhC,OACE,wBAAQwF,UAAWA,EAAWxF,UAAWA,EAAWb,QAASA,EAA7D,SAAwEoG,I,oBCHrE,SAASE,IAAc,IAAD,EAGFnG,mBAAS,CAACoG,QAAQ,EAAOvD,MAAO5C,IAAOoG,QAHrC,mBAGtBC,EAHsB,KAGfC,EAHe,KAM3B,SAAS3B,IACP2B,EAAWD,EAAQ,CAACF,QAASE,EAAMF,OAAQvD,MAASyD,EAAMF,OAAgCnG,IAAOoG,MAA7BpG,IAAOuG,eAS7E,OACE,gCACE,cAACR,EAAD,CACEC,KAAM,YACNvF,UAAWT,IAAOwG,YAClB5G,QAAS+E,IAEb,qBAAKC,SAAU,KAAMnE,UAAW4F,EAAMzD,MAAOiC,UAAW,SAAAX,GAAC,OAd3D,SAA4BA,GACZ,WAAVA,EAAEC,KACJQ,IAY2DG,CAAmBZ,IAAhF,SACE,sBAAKzD,UAAWT,IAAO2C,QAAvB,UACE,wDACA,6CACA,cAACoD,EAAD,CACEC,KAAM,MACNvF,UAAWT,IAAOyG,aAClBR,UAAU,YACVrG,QAAS+E,IAEX,8CAAgB,8CAAhB,uEAAyG,uBAAzG,+BAEA,qBAAKlE,UAAWT,IAAOmB,MACvB,iDACA,qBAAIV,UAAWT,IAAO0G,SAAtB,UACE,8EACA,mHACA,uGC7BKC,MAZf,WAEE,OACE,gCACE,cAACT,EAAD,IAEA,cAAC,EAAD,QCGSU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAvH,EAAOC,QAAU,CAAC,QAAU,2BAA2B,SAAW,4BAA4B,IAAM,uBAAuB,MAAQ,yBAAyB,aAAe,gCAAgC,aAAe,gCAAgC,YAAc,iC,kBCAxQD,EAAOC,QAAU,CAAC,QAAU,4BAA4B,YAAc,gCAAgC,OAAS,2BAA2B,MAAQ,0BAA0B,QAAU,4BAA4B,IAAM,wBAAwB,KAAO,yBAAyB,cAAc,mC","file":"static/js/main.1fc0fad8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Door_main__RLcZi\",\"doorField\":\"Door_doorField__3k3G1\",\"doorButton\":\"Door_doorButton__CrHEq\",\"door\":\"Door_door__28fVU\",\"door_chosen\":\"Door_door_chosen__197yw\",\"door_opened_good\":\"Door_door_opened_good__3Da-J\",\"door_opened_bad\":\"Door_door_opened_bad__3BA-H\",\"hover\":\"Door_hover__2UYbk\"};","import styles from './Door.module.css';\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nfunction Door(props) {\r\n\r\n  const {\r\n  id,\r\n  isTrue,\r\n  isChosen,\r\n  onClick,\r\n  isOpened,\r\n  gameResult } = props;\r\n\r\n\r\n  let [styleCl, setStyleCl] = useState(styles.door)\r\n\r\n  useEffect(() => {\r\n    setStyleCl(styleCl = handleClass())\r\n  },[[isChosen, isOpened]])\r\n\r\n\r\n  function handleClass() {\r\n    if (isChosen === true && gameResult === 'none') {\r\n     styleCl = styles.door_chosen\r\n    } else if (isChosen === true && gameResult !== 'none') {\r\n        styleCl = (isTrue) ? styles.door_opened_good : styles.door_opened_bad\r\n    } else if (isOpened === 'open' && isTrue) {\r\n      styleCl = styles.door_opened_good\r\n    } else if (isOpened === 'open' && !isTrue) {\r\n      styleCl = styles.door_opened_bad\r\n    } else styleCl = styles.door\r\n    return styleCl;\r\n  }\r\n\r\n\r\nreturn(\r\n    <div className={styleCl} onClick={onClick}>\r\n      Door {id+1}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Door;\r\n","export function shuffle(numPool) {\r\n  let array = [];\r\n  for(\r\n    let j, x, i = numPool.length; i;\r\n    j = parseInt(Math.random() * i),\r\n      x = numPool[--i],\r\n      numPool[i] = numPool[j],\r\n      numPool[j] = x\r\n  );\r\n  array = numPool.map(value => !value);\r\n  return array;\r\n};\r\n\r\nexport function winstreak(array) {\r\n  let max = 0;\r\n  let current = 0;\r\n  let value = 'win';\r\n  for (let item of array) {\r\n    if (item === value) {\r\n      current++;\r\n      max = (current > max) ? current : max;\r\n    } else {\r\n      max = (current > max) ? current : max;\r\n      current = 0;\r\n    }\r\n  }\r\n  return {current: current, max: max}\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport styles from './Statistics.module.css';\r\nimport { winstreak } from \"../../utils/utils\"\r\n\r\nfunction Statistics (props) {\r\n\r\n  const [ ...result ] = props.result;\r\n\r\n  const totalWin = result.filter((item => item === 'win')).length\r\n  const totalLose = result.filter((item => item === 'lose')).length\r\n  const winrate = ((Math.round((totalWin / result.length).toFixed(2)*100)))\r\n  const winstreakMax = winstreak(result).max;\r\n  const winstreakCurrent = winstreak(result).current;\r\n\r\n  useEffect(() => {\r\n      renderLine(result)\r\n  }, [result])\r\n\r\n  function renderLine (result) {\r\n    let lines = [];\r\n    for (let i = 0; i < result.length; i++) {\r\n      let lineCl = [];\r\n      if (result[i] === 'none') {\r\n        lineCl[i] = styles.neutral\r\n      } else if (result[i] === 'win') {\r\n        lineCl[i] = styles.win\r\n      } else lineCl[i] = styles.lose\r\n\r\n      lines.unshift(<li key={i} className={lineCl[i]}>\r\n        {`Round ${i + 1}: ${(result[i] === 'none') ? 'skipped' : result[i]}`}</li>)\r\n    }\r\n      return lines;\r\n    }\r\n\r\n    return (\r\n      <div className={styles.wrapper}>\r\n        <h3 style={{width: '250px'}}>Statistics</h3>\r\n        <div className={styles.statWrapper}>\r\n        <div className={styles.titles}>\r\n        <p>Rounds played: <span>{result.length}</span></p>\r\n        <p>Win: <span>{totalWin}</span></p>\r\n        <p>Lose: <span>{totalLose}</span></p>\r\n        <p>Winrate: <span>{(isNaN(winrate)) ? '0%' : `${winrate}%`}</span></p>\r\n        <p>Maximum winstreak: <span>{(winstreakMax)}</span></p>\r\n        <p>Current winstreak: <span>{(winstreakCurrent)}</span></p>\r\n        </div>\r\n        <ul className={styles.lines}>\r\n          {renderLine(result)}\r\n        </ul>\r\n      </div>\r\n      </div>\r\n    )\r\n  }\r\nexport default Statistics;\r\n","import styles from './Door/Door.module.css';\r\nimport React from \"react\";\r\nimport Door from \"./Door/Door\";\r\nimport Statistics from \"../Statistics/Statictics\";\r\nimport { shuffle } from \"../../utils/utils\";\r\n\r\nexport class DoorField extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isChosen: [false, false, false],\r\n      trueArr: shuffle([0,1,2]),\r\n      moveConfirmed: false,\r\n      isOpened: [false, false, false],\r\n      openCount: 0,\r\n      roundResult: 'none',\r\n      resultsCount: [],\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.state.openCount !== prevState.openCount) {\r\n      this.checkWinner();\r\n    }\r\n  }\r\n\r\n  // Controls\r\n\r\n  handleClick(i) {\r\n  const isChosen = this.state.isChosen.slice().fill(false);\r\n  isChosen[i] = !this.state.isChosen[i];\r\n  const confirmed = isChosen.includes(true)\r\n\r\n  this.setState({\r\n    isChosen: isChosen,\r\n    moveConfirmed: confirmed,\r\n  })}\r\n\r\n\r\n  confirmActionOnKey(e) {\r\n    if (e.key === ' ') {\r\n      this.confirmAction();\r\n    }\r\n  }\r\n\r\n  confirmAction() {\r\n    if (this.state.roundResult === 'none') {\r\n    this.openFalseDoor();\r\n  } else {\r\n      this.clearRound();\r\n    }}\r\n\r\n\r\n  openFalseDoor() {\r\n    if (this.state.moveConfirmed) {\r\n    const falseDoorArr = this.state.isOpened.slice();\r\n    const checkFalseDoorArr = falseDoorArr.includes('open');\r\n    let count = 0;\r\n      if (!checkFalseDoorArr) {\r\n        for (let i in falseDoorArr) {\r\n          if (!this.state.isChosen[i] && !this.state.trueArr[i] && count < 2) {\r\n            falseDoorArr[i] = 'open';\r\n            count++;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        for (let i in falseDoorArr) {\r\n          if (!this.state.isChosen[i] && count < 2) {\r\n            falseDoorArr[i] = 'open';\r\n            count++;\r\n          }\r\n        }\r\n      }\r\n\r\n    this.setState({\r\n      isOpened: falseDoorArr,\r\n      openCount: count,\r\n    })}\r\n  }\r\n\r\n  checkWinner() {\r\n    const isTrue = this.state.trueArr.slice();\r\n    let isOpened = this.state.isOpened.slice();\r\n    const openCount = this.state.openCount;\r\n    let isChosen = this.state.isChosen.slice();\r\n    let result = this.state.roundResult\r\n\r\n    for (let i in isOpened) {\r\n      if (isOpened[i] === 'open' && isTrue[i] === true) {\r\n        result = 'lose';\r\n        break;\r\n      } else if (openCount > 1) {\r\n        result = 'win';\r\n        isChosen = Array(3).fill(false);\r\n      }\r\n    }\r\n\r\n    if (openCount > 1) {\r\n      isOpened = Array(3).fill('open');\r\n    }\r\n      this.setState({\r\n        roundResult: result,\r\n        isOpened: isOpened,\r\n        isChosen: isChosen,\r\n      })\r\n    };\r\n\r\n  clearRound() {\r\n    let result = this.state.roundResult;\r\n    const count = this.state.resultsCount;\r\n    count.push(result);\r\n\r\n    this.setState({\r\n      isChosen: [false, false, false],\r\n      trueArr: shuffle([0,1,2]),\r\n      moveConfirmed: false,\r\n      isOpened: [false, false, false],\r\n      openCount: 0,\r\n      roundResult: 'none',\r\n      resultsCount: count,\r\n  })}\r\n\r\n  resetState() {\r\n    this.setState({\r\n      isChosen: [false, false, false],\r\n      trueArr: shuffle([0,1,2]),\r\n      moveConfirmed: false,\r\n      isOpened: [false, false, false],\r\n      openCount: 0,\r\n      roundResult: 'none',\r\n      resultsCount: [],\r\n\r\n    })}\r\n\r\n  renderDoor(i){\r\n     return (\r\n    <Door\r\n      id={i}\r\n      isTrue={this.state.trueArr[i]}\r\n      isChosen={this.state.isChosen[i]}\r\n      onClick={() => this.handleClick(i)}\r\n      isOpened={this.state.isOpened[i]}\r\n      gameResult={this.state.roundResult}\r\n     />\r\n     )\r\n  }\r\n\r\n  continueButton () {\r\n    let result;\r\n    switch (this.state.openCount) {\r\n      case 0: result = 'Choose a door';\r\n      break;\r\n      case 1: result = 'Stick or switch';\r\n      break;\r\n      default: break;\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n\r\n      render() {\r\n    return (\r\n      <div tabIndex={'-1'} onKeyDown={(e) => this.confirmActionOnKey(e)}>\r\n      <h1 align={\"center\"}>Round {this.state.resultsCount.length + 1} {(this.state.roundResult === 'none') ? '' : this.state.roundResult.toUpperCase()}</h1>\r\n        <section className={styles.main}>\r\n        <div className={styles.doorField}>\r\n        {this.renderDoor(0)}\r\n        {this.renderDoor(1)}\r\n        {this.renderDoor(2)}\r\n          <button\r\n            className={styles.doorButton}\r\n            onClick={() => this.confirmAction()}>{this.state.roundResult !== 'none' ? 'Next round' : this.continueButton()}\r\n          </button>\r\n          <button onClick={() => this.clearRound()}>Skip round</button>\r\n          <button onClick={() => this.resetState()}>Clear game</button>\r\n        </div>\r\n          <div style={{\r\n            margin: '20px',\r\n            textAlign: \"center\",\r\n            height: \"40px\",\r\n          }}>Make your choice and Press the \"Choose a door\" button (or \"Space\" instead).\r\n            <br/>\r\n            <a href={\"https://ru.wikipedia.org/wiki/Парадокс_Монти_Холла\"} target={\"_blank\"} rel={\"noreferrer\"}>{this.state.resultsCount.length > 4 ? 'For more info check the Wiki page' : ''}</a>\r\n          </div>\r\n        </section>\r\n        <Statistics\r\n          result={this.state.resultsCount}\r\n        />\r\n      </div>\r\n    )}\r\n}\r\n\r\n\r\n","import React from \"react\";\r\n\r\n\r\nexport function ToggleButton (props) {\r\n  let { name, onClick, autoFocus, className } = {...props};\r\n\r\n  return (\r\n    <button autoFocus={autoFocus} className={className} onClick={onClick} >{name}</button>\r\n  )\r\n}\r\n","import React, { useState } from \"react\";\r\nimport {ToggleButton} from \"./ToggleButton/ToggleButton\";\r\nimport styles from './HowToPlay.module.css';\r\n\r\nexport function HowToPlay () {\r\n\r\n\r\n  let [close, setClosed] = useState({closed: false, style: styles.frame});\r\n\r\n\r\n  function handleClick() {\r\n    setClosed( close = {closed: !close.closed, style: (!close.closed) ? styles.frame_closed : styles.frame})\r\n    }\r\n  function confirmActionOnKey(e) {\r\n    if (e.key === 'Escape') {\r\n      handleClick();\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <ToggleButton\r\n        name={'HowToPlay'}\r\n        className={styles.button_open}\r\n        onClick={handleClick}\r\n      />\r\n    <div tabIndex={'-1'} className={close.style} onKeyDown={e => confirmActionOnKey(e)}>\r\n      <div className={styles.wrapper}>\r\n        <h1>Monty-Hall door's game</h1>\r\n        <h3>How to play</h3>\r\n        <ToggleButton\r\n          name={'Esc'}\r\n          className={styles.button_close}\r\n          autoFocus=\"autoFocus\"\r\n          onClick={handleClick}\r\n        />\r\n        <p>There is one <em>Treasure map</em> behind one of this doors! Another two contains bags, full of trash.<br/>\r\n        You should find this map.</p>\r\n        <div className={styles.map}/>\r\n        <h3>Order of moves </h3>\r\n        <ol className={styles.moveList}>\r\n          <li>Choose one of the doors and press 'Continue'</li>\r\n          <li>Your opponent(computer) make his choice by opening one of the doors with a trash.</li>\r\n          <li>Now you could choose again. Pick the same door or another.</li>\r\n        </ol>\r\n      </div>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import {DoorField} from \"./DoorGame/DoorField\";\r\nimport {HowToPlay} from \"./HowToPlay/HowToPlay\";\r\n\r\nfunction Game () {\r\n\r\n  return (\r\n    <div>\r\n      <HowToPlay\r\n      />\r\n      <DoorField\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Game;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Game from \"./components/Game/Game\";\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Game />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"HowToPlay_wrapper__25x0a\",\"moveList\":\"HowToPlay_moveList__NkNV7\",\"map\":\"HowToPlay_map__3D52x\",\"frame\":\"HowToPlay_frame__8A0dt\",\"frame_closed\":\"HowToPlay_frame_closed__1vGTH\",\"button_close\":\"HowToPlay_button_close__DIxCy\",\"button_open\":\"HowToPlay_button_open__29uwq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Statistics_wrapper__1Den4\",\"statWrapper\":\"Statistics_statWrapper__3V9p_\",\"titles\":\"Statistics_titles__3ydjT\",\"lines\":\"Statistics_lines__3fyes\",\"neutral\":\"Statistics_neutral__14Vko\",\"win\":\"Statistics_win__1VerY\",\"lose\":\"Statistics_lose__1gEMT\",\"count-title\":\"Statistics_count-title__XkPuj\"};"],"sourceRoot":""}