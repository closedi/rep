{"version":3,"sources":["components/Game/Door/Door.module.css","components/Game/Door/Door.js","components/Game/utils/utils.js","components/Game/Game.js","reportWebVitals.js","index.js"],"names":["module","exports","Door","props","useState","styles","door","styleCl","setStyleCl","useEffect","isChosen","door_chosen","isOpened","isTrue","door_opened_good","door_opened_bad","handleClass","className","onClick","id","shuffle","numPool","j","x","i","length","parseInt","Math","random","map","value","Game","state","trueArr","moveConfirmed","openCount","gameResult","prevProps","prevState","snapshot","this","checkWinner","slice","fill","setState","includes","e","key","confirmAction","openFalseDoor","falseDoorArr","count","result","handleClick","tabIndex","onKeyDown","confirmActionOnKey","align","main","doorField","renderDoor","door_button","clearGame","style","marginTop","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da20e7ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Door_main__2HeNI\",\"doorField\":\"Door_doorField__3cfX-\",\"door_button\":\"Door_door_button__3tWMD\",\"door\":\"Door_door__1gTSz\",\"door_chosen\":\"Door_door_chosen__Y6psW\",\"door_opened_good\":\"Door_door_opened_good__1zuNt\",\"door_opened_bad\":\"Door_door_opened_bad__32PF0\",\"hover\":\"Door_hover__1z167\"};","import styles from './Door.module.css';\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nfunction Door(props) {\r\n  // const [isOpen, setIsOpen] = useState({isOpen: false})\r\n  //\r\n  // useEffect(() => {\r\n  //   open();\r\n  // }, [props.moveConfirmed])\r\n  //\r\n  // function open () {\r\n  //   if (props.moveConfirmed && !props.isChosen && !props.isTrue) {\r\n  //     setIsOpen({isOpen: true})\r\n  //   }\r\n  // }\r\n\r\n  let [styleCl, setStyleCl] = useState(styles.door)\r\n\r\n  useEffect(() => {\r\n    setStyleCl(styleCl = handleClass())\r\n  },[[props.isChosen, props.isOpened]])\r\n\r\n  function handleClass() {\r\n    if (props.isChosen === true) {\r\n     styleCl = styles.door_chosen\r\n    } else if (props.isOpened === 'open' && props.isTrue) {\r\n      styleCl = styles.door_opened_good\r\n    } else if (props.isOpened === 'open' && !props.isTrue) {\r\n      styleCl = styles.door_opened_bad\r\n    } else styleCl = styles.door\r\n    return styleCl;\r\n  }\r\n\r\n\r\n\r\n\r\nreturn(\r\n    <div className={styleCl} onClick={props.onClick}>\r\n      Дверь {props.id+1}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Door;\r\n","export function shuffle(numPool) {\r\n  let array = [];\r\n  for(\r\n    let j, x, i = numPool.length; i;\r\n    j = parseInt(Math.random() * i),\r\n      x = numPool[--i],\r\n      numPool[i] = numPool[j],\r\n      numPool[j] = x\r\n  );\r\n  array = numPool.map(value => !value);\r\n  return array;\r\n};\r\n","import styles from './Door/Door.module.css';\r\nimport React from \"react\";\r\nimport Door from \"./Door/Door\";\r\nimport { shuffle } from \"./utils/utils\";\r\n\r\nexport class Game extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isChosen: [false, false, false],\r\n      trueArr: shuffle([0,1,2]),\r\n      moveConfirmed: false,\r\n      isOpened: [false, false, false],\r\n      openCount: 0,\r\n      gameResult: 'none',\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.state.openCount !== prevState.openCount) {\r\n      this.checkWinner();\r\n    }\r\n  }\r\n\r\n\r\n  handleClick(i) {\r\n  const isChosen = this.state.isChosen.slice().fill(false);\r\n  isChosen[i] = !this.state.isChosen[i];\r\n    const confirmed = function () {\r\n      return (isChosen.includes(true))\r\n    }\r\n  this.setState({\r\n    isChosen: isChosen,\r\n    moveConfirmed: confirmed(),\r\n  })\r\n}\r\n\r\n  confirmActionOnKey(e) {\r\n    if (e.key === ' ') {\r\n      this.confirmAction();\r\n    }\r\n  }\r\n\r\n  confirmAction() {\r\n    const isChosen = this.state.isChosen.slice()\r\n    const confirmed = function () {\r\n      return (isChosen.includes(true))\r\n    }\r\n\r\n     this.setState({\r\n       isChosen: isChosen,\r\n       moveConfirmed: confirmed(),\r\n     })\r\n\r\n    this.openFalseDoor();\r\n  }\r\n\r\n\r\n  openFalseDoor() {\r\n    if (this.state.moveConfirmed) {\r\n    const falseDoorArr = this.state.isOpened.slice();\r\n    const checkFalseDoorArr = (falseDoorArr.includes('open'));\r\n    let count = 0;\r\n      if (!checkFalseDoorArr) {\r\n        for (let i in falseDoorArr) {\r\n          if (!this.state.isChosen[i] && !this.state.trueArr[i]) {\r\n            falseDoorArr[i] = 'open';\r\n            count++;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        for (let i in falseDoorArr) {\r\n          if (!this.state.isChosen[i]) {\r\n            falseDoorArr[i] = 'open';\r\n            count++;\r\n          }\r\n        }\r\n      }\r\n\r\n    this.setState({\r\n      isOpened: falseDoorArr,\r\n      openCount: count,\r\n    })}\r\n  }\r\n\r\n  checkWinner() {\r\n    const isTrue = this.state.trueArr.slice();\r\n    const isOpened = this.state.isOpened.slice();\r\n    const openCount = this.state.openCount;\r\n    let isChosen = this.state.isChosen.slice();\r\n    let result = this.state.gameResult\r\n\r\n    for (let i in isOpened) {\r\n      if (isOpened[i] === 'open' && isTrue[i] === true) {\r\n        result = 'lose';\r\n        break;\r\n      } else if (openCount > 1) {\r\n        result = 'win';\r\n        isOpened[i] = 'open';\r\n      }\r\n    }\r\n      this.setState({\r\n        gameResult: result,\r\n        isOpened: isOpened,\r\n      })\r\n    };\r\n\r\n  clearGame() {\r\n\r\n    this.setState({\r\n      isChosen: [false, false, false],\r\n      trueArr: shuffle([0,1,2]),\r\n      moveConfirmed: false,\r\n      isOpened: [false, false, false],\r\n      openCount: 0,\r\n      gameResult: 'none',\r\n  })}\r\n\r\n  renderDoor(i){\r\n     return (\r\n    <Door\r\n      id={i}\r\n      isTrue={this.state.trueArr[i]}\r\n      isChosen={this.state.isChosen[i]}\r\n      onClick={() => this.handleClick(i)}\r\n      isOpened={this.state.isOpened[i]}\r\n     />\r\n     )\r\n  }\r\n\r\n\r\n      render() {\r\n    return (\r\n      <div  tabIndex={'0'} onKeyDown={(e) => this.confirmActionOnKey(e)}>\r\n      <h1 align={\"center\"}>Greetings, stranger. Nice to see you in the Monty Hall door's game.</h1>\r\n        <section className={styles.main}>\r\n        <div className={styles.doorField}>\r\n        {this.renderDoor(0)}\r\n        {this.renderDoor(1)}\r\n        {this.renderDoor(2)}\r\n          <button className={styles.door_button} onClick={() => this.confirmAction()}>Продолжить</button>\r\n          <button onClick={() => this.clearGame()}>Обновить</button>\r\n        </div>\r\n\r\n        <div style={{\r\n          marginTop: '20px',\r\n        }}>\r\n          Make your choice and Press the \"Continue\" button (or Space instead).\r\n        </div>\r\n        </section>\r\n\r\n      </div>\r\n    )}\r\n}\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Game } from './components/Game/Game';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Game />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}